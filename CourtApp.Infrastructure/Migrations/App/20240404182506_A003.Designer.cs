// <auto-generated />
using System;
using CourtApp.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourtApp.Infrastructure.Migrations.App
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240404182506_A003")]
    partial class A003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuditTrail.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActAmendedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ActID")
                        .HasColumnType("uuid");

                    b.Property<int>("AmendedActID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActID");

                    b.ToTable("m_act_amended", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActBookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ActId")
                        .HasColumnType("uuid");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("BookPageNo")
                        .HasColumnType("text");

                    b.Property<int?>("BookSrNo")
                        .HasColumnType("integer");

                    b.Property<int>("BookYear")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.ToTable("m_act_book", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActCategory")
                        .HasColumnType("text");

                    b.Property<string>("ActName")
                        .HasColumnType("text");

                    b.Property<int>("ActNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ActTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("ActYear")
                        .HasColumnType("integer");

                    b.Property<string>("AssentBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ComeInforce")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("GazetteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GazetteId")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nature")
                        .HasColumnType("text");

                    b.Property<int?>("PageNo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PublishedGazeteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubActNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.HasIndex("PartId");

                    b.HasIndex("SubjectId");

                    b.ToTable("m_act", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActRepealedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ActID")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RepealedActID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActID");

                    b.ToTable("ad.m_repealed_rule");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_act_type", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.GazetteTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_gazzet_type", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.PartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GazetteTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GazetteTypeId");

                    b.ToTable("m_part", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.BlockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DistrictCode");

                    b.ToTable("m_block");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DistrictCode");

                    b.ToTable("m_city");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.SubjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("m_subject", "common");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.WardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityCode")
                        .HasColumnType("integer");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityCode");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("m_ward");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.AgainstCaseDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cadder")
                        .HasColumnType("text");

                    b.Property<string>("CisNumber")
                        .HasColumnType("text");

                    b.Property<int>("CisYear")
                        .HasColumnType("integer");

                    b.Property<string>("CnrNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ImpugedOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("ProcOfficer")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("case_detail_against", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.BookTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_book_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseKindId")
                        .HasColumnType("uuid");

                    b.Property<string>("CaseStageCode")
                        .HasColumnType("text");

                    b.Property<Guid>("CaseTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CisNumber")
                        .HasColumnType("text");

                    b.Property<int>("CisYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("CnrNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstTitle")
                        .HasColumnType("text");

                    b.Property<int>("FirstTitleCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InstitutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LinkedCaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NatureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NextDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("SecondTitle")
                        .HasColumnType("text");

                    b.Property<int>("SecoundTitleCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TypeOfCaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseKindId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("NatureId");

                    b.HasIndex("TypeOfCaseId");

                    b.ToTable("case_detail", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseKindEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseKind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("m_case_kind", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseStageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseStage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_case_stage", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer");

                    b.Property<string>("Dob")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsRural")
                        .HasColumnType("boolean");

                    b.Property<string>("Landmark")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int?>("StateCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("StateCode");

                    b.ToTable("client", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtFeeTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CourtFeeTypeId");

                    b.ToTable("m_court_fee", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeStructureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FixAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("MaxValue")
                        .HasColumnType("double precision");

                    b.Property<double>("MinValue")
                        .HasColumnType("double precision");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<int>("StateCode")
                        .HasColumnType("integer");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("m_court_fee_structure", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourtFeeType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_court_fee_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Bench")
                        .HasColumnType("text");

                    b.Property<Guid?>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer");

                    b.Property<string>("HeadQuerter")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int?>("StateCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("StateCode");

                    b.ToTable("m_court", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourtType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_court_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ExpenseHeadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_expense_head", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.LDBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("m_book", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.LawyerMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("m_lawyer", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("m_nature", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ProceedingHeadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_proceeding_head", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ProceedingSubHeadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<Guid>("PHeadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PHeadId");

                    b.ToTable("m_proceeding_sub_head", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PropriatorName")
                        .HasColumnType("text");

                    b.Property<string>("PublicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_publisher", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<Guid>("CaseCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<Guid?>("NatureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NatureId");

                    b.ToTable("m_c_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.WorkMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Work_En")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Work_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_work_master", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.WorkMasterSubEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<Guid>("WMasterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WMasterId");

                    b.ToTable("m_work_master_sub", "ld");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.DistrictEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int?>("StateCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StateCode");

                    b.ToTable("m_district");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.StateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("m_state");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActAmendedEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActEntity", "Act")
                        .WithMany("AmendedActs")
                        .HasForeignKey("ActID");

                    b.Navigation("Act");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActBookEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActEntity", "Act")
                        .WithMany("ActBooks")
                        .HasForeignKey("ActId");

                    b.Navigation("Act");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActTypeEntity", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId");

                    b.HasOne("CourtApp.Domain.Entities.Advocate.PartEntity", "Part")
                        .WithMany()
                        .HasForeignKey("PartId");

                    b.HasOne("CourtApp.Domain.Entities.Common.SubjectEntity", "Subject")
                        .WithMany("Acts")
                        .HasForeignKey("SubjectId");

                    b.Navigation("ActType");

                    b.Navigation("Part");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActRepealedEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActEntity", "Act")
                        .WithMany("RepealedActs")
                        .HasForeignKey("ActID");

                    b.Navigation("Act");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.PartEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.GazetteTypeEntity", "GazetteType")
                        .WithMany("Parts")
                        .HasForeignKey("GazetteTypeId");

                    b.Navigation("GazetteType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.BlockEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.DistrictEntity", "District")
                        .WithMany("Blocks")
                        .HasForeignKey("DistrictCode");

                    b.Navigation("District");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.CityEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.DistrictEntity", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictCode");

                    b.Navigation("District");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.WardEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Common.CityEntity", "city")
                        .WithMany("Wards")
                        .HasForeignKey("CityCode");

                    b.Navigation("city");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CaseKindEntity", "CaseKind")
                        .WithMany()
                        .HasForeignKey("CaseKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", "TypeOfCase")
                        .WithMany()
                        .HasForeignKey("TypeOfCaseId");

                    b.Navigation("CaseKind");

                    b.Navigation("Court");

                    b.Navigation("CourtType");

                    b.Navigation("Nature");

                    b.Navigation("TypeOfCase");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseKindEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ClientEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.DistrictEntity", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateCode");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtFeeTypeEntity", "CourtFeeType")
                        .WithMany()
                        .HasForeignKey("CourtFeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtFeeType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeStructureEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId");

                    b.HasOne("CourtApp.Entities.Common.DistrictEntity", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateCode");

                    b.Navigation("CourtType");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.LDBookEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.BookTypeEntity", "BookType")
                        .WithMany("lDBookEntities")
                        .HasForeignKey("BookTypeId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.PublisherEntity", "Publisher")
                        .WithMany("lDBookEntities")
                        .HasForeignKey("PublisherId");

                    b.Navigation("BookType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ProceedingSubHeadEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.ProceedingHeadEntity", "ProceedingHead")
                        .WithMany()
                        .HasForeignKey("PHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProceedingHead");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId");

                    b.Navigation("Nature");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.WorkMasterSubEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.WorkMasterEntity", "WorkMaster")
                        .WithMany()
                        .HasForeignKey("WMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkMaster");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.DistrictEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany("Districts")
                        .HasForeignKey("StateCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActEntity", b =>
                {
                    b.Navigation("ActBooks");

                    b.Navigation("AmendedActs");

                    b.Navigation("RepealedActs");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.GazetteTypeEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.CityEntity", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.SubjectEntity", b =>
                {
                    b.Navigation("Acts");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.BookTypeEntity", b =>
                {
                    b.Navigation("lDBookEntities");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.PublisherEntity", b =>
                {
                    b.Navigation("lDBookEntities");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.DistrictEntity", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.StateEntity", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
