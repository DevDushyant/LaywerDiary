// <auto-generated />
using System;
using CourtApp.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourtApp.Infrastructure.Migrations.App
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250301044428_ModifyClient")]
    partial class ModifyClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuditTrail.Models.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActAmendedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActID")
                        .HasColumnType("uuid");

                    b.Property<int>("AmendedActID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActID");

                    b.ToTable("m_act_amended", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActId")
                        .HasColumnType("uuid");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("BookPageNo")
                        .HasColumnType("text");

                    b.Property<int?>("BookSrNo")
                        .HasColumnType("integer");

                    b.Property<int>("BookYear")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActId");

                    b.ToTable("m_act_book", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActCategory")
                        .HasColumnType("text");

                    b.Property<string>("ActName")
                        .HasColumnType("text");

                    b.Property<int>("ActNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ActTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("ActYear")
                        .HasColumnType("integer");

                    b.Property<string>("AssentBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ComeInforce")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("GazetteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GazetteId")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nature")
                        .HasColumnType("text");

                    b.Property<int?>("PageNo")
                        .HasColumnType("integer");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PublishedGazeteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubActNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.HasIndex("PartId");

                    b.HasIndex("SubjectId");

                    b.ToTable("m_act", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActRepealedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActID")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RepealedActID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActID");

                    b.ToTable("ad.m_repealed_rule");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_act_type", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.GazetteTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_gazzet_type", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.PartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GazetteTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GazetteTypeId");

                    b.ToTable("m_part", "ad");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseDetailAgainstEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CadreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CaseNo")
                        .HasColumnType("text");

                    b.Property<Guid>("CaseTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("CaseYear")
                        .HasColumnType("integer");

                    b.Property<string>("CisNo")
                        .HasColumnType("text");

                    b.Property<int>("CisYear")
                        .HasColumnType("integer");

                    b.Property<string>("CnrNo")
                        .HasColumnType("text");

                    b.Property<Guid?>("ComplexId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtBenchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourtDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ImpugedOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfficerName")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int?>("StrengthId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CadreId");

                    b.HasIndex("CaseCategoryId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("ComplexId");

                    b.HasIndex("CourtBenchId");

                    b.HasIndex("CourtDistrictId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("case_detail_against", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppearenceID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CaseNo")
                        .HasColumnType("text");

                    b.Property<Guid?>("CaseStageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("CaseYear")
                        .HasColumnType("integer");

                    b.Property<string>("CisNumber")
                        .HasColumnType("text");

                    b.Property<int>("CisYear")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("CnrNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("ComplexId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtBenchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourtDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FTitleId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("InstitutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LCaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LinkedCaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("STitleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondTitle")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("StrengthId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppearenceID");

                    b.HasIndex("CaseCategoryId");

                    b.HasIndex("CaseStageId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ComplexId");

                    b.HasIndex("CourtBenchId");

                    b.HasIndex("CourtDistrictId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("FTitleId");

                    b.HasIndex("LinkedCaseId");

                    b.HasIndex("STitleId");

                    b.HasIndex("StateId");

                    b.ToTable("case_detail", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseProcedingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("HeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ProceedingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubHeadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("HeadId");

                    b.HasIndex("StageId");

                    b.HasIndex("SubHeadId");

                    b.ToTable("r_case_proceeding", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseTitleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("case_titles", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseWorkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AppliedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReceivedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WorkingDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("r_case_working", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.BlockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("m_block");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("m_city");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.SubjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("m_subject", "common");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.WardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("m_ward");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.DraftingDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DraftingFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("DraftingFormId");

                    b.HasIndex("TemplateId");

                    b.ToTable("case_petition_detail");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.FormBuilderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormName")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_frm_types");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.FormTemplateMappingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("m_temp_frm_mapping");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.TemplateInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TemplateBody")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("TemplatePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_template_info");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.BookTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_book_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CadreMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_cadre", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseDocsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DOId")
                        .HasColumnType("uuid");

                    b.Property<int>("DOTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DOId");

                    b.ToTable("r_case_docs", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseKindEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseKind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("m_case_kind", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseStageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CaseStage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_case_stage", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Properiter")
                        .HasColumnType("text");

                    b.Property<string>("ReferalBy")
                        .HasColumnType("text");

                    b.Property<string>("RegNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("client", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtBenchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CourtBench_En")
                        .HasColumnType("text");

                    b.Property<string>("CourtBench_Hn")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtMasterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourtMasterId");

                    b.ToTable("r_court_bench", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtComplexEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourtDistrictId");

                    b.HasIndex("StateId");

                    b.ToTable("m_court_complex", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtDistrictEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("m_court_district", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FeeTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("m_court_fee", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeStructureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FixAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("MaxValue")
                        .HasColumnType("double precision");

                    b.Property<double>("MinValue")
                        .HasColumnType("double precision");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("m_court_fee_structure", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourtFeeType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_court_fee_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<Guid?>("CourtComplexId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourtDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourtComplexId");

                    b.HasIndex("CourtDistrictId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("m_court", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CourtType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_court_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.DOTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("m_do_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ExpenseHeadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadName")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("m_expense_head", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.FSTitleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("m_fs_title", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.LDBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("m_book", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.LawyerMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Caste")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EnrollNumber")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImgPath")
                        .HasColumnType("text");

                    b.Property<string>("RelPerson")
                        .HasColumnType("text");

                    b.Property<string>("Relegion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_lawyer", "common");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("m_nature", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ProceedingHeadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_proceeding_head", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ProceedingSubHeadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("HeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HeadId");

                    b.ToTable("m_proceeding_sub_head", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PropriatorName")
                        .HasColumnType("text");

                    b.Property<string>("PublicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_publisher", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.SpecializationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("specilization", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<Guid>("NatureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("NatureId");

                    b.ToTable("m_c_type", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.WorkMasterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Work_En")
                        .HasColumnType("text");

                    b.Property<string>("Work_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_work_master", "ld");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.WorkMasterSubEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("m_work_master_sub", "ld");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.DistrictEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("m_district");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.StateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_En")
                        .HasColumnType("text");

                    b.Property<string>("Name_Hn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("m_state");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActAmendedEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActEntity", "Act")
                        .WithMany("AmendedActs")
                        .HasForeignKey("ActID");

                    b.Navigation("Act");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActBookEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActEntity", "Act")
                        .WithMany("ActBooks")
                        .HasForeignKey("ActId");

                    b.Navigation("Act");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActTypeEntity", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.Advocate.PartEntity", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.Common.SubjectEntity", "Subject")
                        .WithMany("Acts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActType");

                    b.Navigation("Part");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActRepealedEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.ActEntity", "Act")
                        .WithMany("RepealedActs")
                        .HasForeignKey("ActID");

                    b.Navigation("Act");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.PartEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Advocate.GazetteTypeEntity", "GazetteType")
                        .WithMany("Parts")
                        .HasForeignKey("GazetteTypeId");

                    b.Navigation("GazetteType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseDetailAgainstEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CadreMasterEntity", "Cadre")
                        .WithMany()
                        .HasForeignKey("CadreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", "CaseCategory")
                        .WithMany()
                        .HasForeignKey("CaseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", "Case")
                        .WithMany("CaseAgainstEntities")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtComplexEntity", "Complex")
                        .WithMany()
                        .HasForeignKey("ComplexId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtBenchEntity", "CourtBench")
                        .WithMany()
                        .HasForeignKey("CourtBenchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtDistrictEntity", "CourtDistrict")
                        .WithMany()
                        .HasForeignKey("CourtDistrictId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cadre");

                    b.Navigation("Case");

                    b.Navigation("CaseCategory");

                    b.Navigation("CaseType");

                    b.Navigation("Complex");

                    b.Navigation("CourtBench");

                    b.Navigation("CourtDistrict");

                    b.Navigation("CourtType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.FSTitleEntity", "Appearence")
                        .WithMany()
                        .HasForeignKey("AppearenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", "CaseCategory")
                        .WithMany()
                        .HasForeignKey("CaseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CaseStageEntity", "CaseStage")
                        .WithMany()
                        .HasForeignKey("CaseStageId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtComplexEntity", "Complex")
                        .WithMany()
                        .HasForeignKey("ComplexId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtBenchEntity", "CourtBench")
                        .WithMany()
                        .HasForeignKey("CourtBenchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtDistrictEntity", "CourtDistrict")
                        .WithMany()
                        .HasForeignKey("CourtDistrictId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.FSTitleEntity", "FTitle")
                        .WithMany()
                        .HasForeignKey("FTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", "LinkedCase")
                        .WithMany("LinkedCases")
                        .HasForeignKey("LinkedCaseId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.FSTitleEntity", "STitle")
                        .WithMany()
                        .HasForeignKey("STitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appearence");

                    b.Navigation("CaseCategory");

                    b.Navigation("CaseStage");

                    b.Navigation("CaseType");

                    b.Navigation("Client");

                    b.Navigation("Complex");

                    b.Navigation("CourtBench");

                    b.Navigation("CourtDistrict");

                    b.Navigation("CourtType");

                    b.Navigation("FTitle");

                    b.Navigation("LinkedCase");

                    b.Navigation("STitle");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseProcedingEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", "Case")
                        .WithMany("CaseProcEntities")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.ProceedingHeadEntity", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CaseStageEntity", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.ProceedingSubHeadEntity", "SubHead")
                        .WithMany()
                        .HasForeignKey("SubHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CourtApp.Domain.Entities.CaseDetails.ProceedingWorkEntity", "ProcWork", b1 =>
                        {
                            b1.Property<Guid>("CaseProcedingEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime?>("LastWorkingDate")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("CaseProcedingEntityId");

                            b1.ToTable("r_case_proceeding", "ld");

                            b1.ToJson("ProcWork");

                            b1.WithOwner()
                                .HasForeignKey("CaseProcedingEntityId");

                            b1.OwnsMany("CourtApp.Domain.Entities.CaseDetails.ProcWorkEntity", "Works", b2 =>
                                {
                                    b2.Property<Guid>("ProceedingWorkEntityCaseProcedingEntityId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<DateTime>("AppliedOn")
                                        .HasColumnType("timestamp without time zone");

                                    b2.Property<DateTime>("ReceivedOn")
                                        .HasColumnType("timestamp without time zone");

                                    b2.Property<int>("Status")
                                        .HasColumnType("integer");

                                    b2.Property<Guid>("WorkId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("WorkTypeId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("ProceedingWorkEntityCaseProcedingEntityId", "__synthesizedOrdinal");

                                    b2.ToTable("r_case_proceeding", "ld");

                                    b2.WithOwner()
                                        .HasForeignKey("ProceedingWorkEntityCaseProcedingEntityId");
                                });

                            b1.Navigation("Works");
                        });

                    b.Navigation("Case");

                    b.Navigation("Head");

                    b.Navigation("ProcWork");

                    b.Navigation("Stage");

                    b.Navigation("SubHead");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseTitleEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", "Case")
                        .WithMany("Titles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CourtApp.Domain.Entities.CaseDetails.CaseApplicantDetailEntity", "CaseApplicants", b1 =>
                        {
                            b1.Property<Guid>("CaseTitleEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ApplicantDetail")
                                .HasColumnType("text");

                            b1.Property<int>("ApplicantNo")
                                .HasColumnType("integer");

                            b1.HasKey("CaseTitleEntityId", "__synthesizedOrdinal");

                            b1.ToTable("case_titles", "ld");

                            b1.ToJson("CaseApplicants");

                            b1.WithOwner()
                                .HasForeignKey("CaseTitleEntityId");
                        });

                    b.Navigation("Case");

                    b.Navigation("CaseApplicants");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseWorkEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.WorkMasterSubEntity", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.WorkMasterEntity", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Work");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.BlockEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.DistrictEntity", "District")
                        .WithMany("Blocks")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.CityEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.DistrictEntity", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.WardEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.Common.CityEntity", "city")
                        .WithMany("Wards")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.DraftingDetailEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.FormBuilder.FormBuilderEntity", "DraftingForm")
                        .WithMany()
                        .HasForeignKey("DraftingFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.FormBuilder.TemplateInfoEntity", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CourtApp.Domain.Entities.FormBuilder.FormFieldValueEntity", "FieldDetails", b1 =>
                        {
                            b1.Property<Guid>("DraftingDetailEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<Guid>("Key")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("DraftingDetailEntityId", "__synthesizedOrdinal");

                            b1.ToTable("case_petition_detail");

                            b1.ToJson("FieldDetails");

                            b1.WithOwner()
                                .HasForeignKey("DraftingDetailEntityId");
                        });

                    b.Navigation("Case");

                    b.Navigation("DraftingForm");

                    b.Navigation("FieldDetails");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.FormBuilderEntity", b =>
                {
                    b.OwnsOne("CourtApp.Domain.Entities.FormBuilder.FormFieldsEntity", "FieldsDetails", b1 =>
                        {
                            b1.Property<Guid>("FormBuilderEntityId")
                                .HasColumnType("uuid");

                            b1.HasKey("FormBuilderEntityId");

                            b1.ToTable("m_frm_types");

                            b1.ToJson("FieldsDetails");

                            b1.WithOwner()
                                .HasForeignKey("FormBuilderEntityId");

                            b1.OwnsMany("CourtApp.Domain.Entities.FormBuilder.FieldDetailsEntity", "Fields", b2 =>
                                {
                                    b2.Property<Guid>("FormFieldsEntityFormBuilderEntityId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("DefaultVal")
                                        .HasColumnType("text");

                                    b2.Property<int>("DispOrder")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsRequire")
                                        .HasColumnType("boolean");

                                    b2.Property<Guid>("Key")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Name")
                                        .HasColumnType("text");

                                    b2.Property<string>("Placeholder")
                                        .HasColumnType("text");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer");

                                    b2.HasKey("FormFieldsEntityFormBuilderEntityId", "__synthesizedOrdinal");

                                    b2.ToTable("m_frm_types");

                                    b2.WithOwner()
                                        .HasForeignKey("FormFieldsEntityFormBuilderEntityId");

                                    b2.OwnsOne("CourtApp.Domain.Entities.FormBuilder.FieldSizeEntity", "FieldSize", b3 =>
                                        {
                                            b3.Property<Guid>("FieldDetailsEntityFormFieldsEntityFormBuilderEntityId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("FieldDetailsEntity__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Cols")
                                                .HasColumnType("text");

                                            b3.Property<string>("Max")
                                                .HasColumnType("text");

                                            b3.Property<string>("Min")
                                                .HasColumnType("text");

                                            b3.Property<string>("Rows")
                                                .HasColumnType("text");

                                            b3.HasKey("FieldDetailsEntityFormFieldsEntityFormBuilderEntityId", "FieldDetailsEntity__synthesizedOrdinal");

                                            b3.ToTable("m_frm_types");

                                            b3.WithOwner()
                                                .HasForeignKey("FieldDetailsEntityFormFieldsEntityFormBuilderEntityId", "FieldDetailsEntity__synthesizedOrdinal");
                                        });

                                    b2.Navigation("FieldSize");
                                });

                            b1.Navigation("Fields");
                        });

                    b.Navigation("FieldsDetails");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.FormTemplateMappingEntity", b =>
                {
                    b.OwnsMany("CourtApp.Domain.Entities.FormBuilder.MappingEntity", "FieldsMapping", b1 =>
                        {
                            b1.Property<Guid>("FormTemplateMappingEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<Guid>("Key")
                                .HasColumnType("uuid");

                            b1.Property<string>("Tag")
                                .HasColumnType("text");

                            b1.HasKey("FormTemplateMappingEntityId", "__synthesizedOrdinal");

                            b1.ToTable("m_temp_frm_mapping");

                            b1.ToJson("FieldsMapping");

                            b1.WithOwner()
                                .HasForeignKey("FormTemplateMappingEntityId");
                        });

                    b.Navigation("FieldsMapping");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.FormBuilder.TemplateInfoEntity", b =>
                {
                    b.OwnsMany("CourtApp.Domain.Entities.FormBuilder.TemplateTagsEntity", "Tags", b1 =>
                        {
                            b1.Property<Guid>("TemplateInfoEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Tag")
                                .HasColumnType("text");

                            b1.HasKey("TemplateInfoEntityId", "__synthesizedOrdinal");

                            b1.ToTable("m_template_info");

                            b1.ToJson("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TemplateInfoEntityId");
                        });

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseDocsEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.DOTypeEntity", "DO")
                        .WithMany()
                        .HasForeignKey("DOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DO");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CaseKindEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtBenchEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", "CourtMaster")
                        .WithMany("CourtBenches")
                        .HasForeignKey("CourtMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtMaster");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtComplexEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtDistrictEntity", "CourtDistrict")
                        .WithMany()
                        .HasForeignKey("CourtDistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtDistrict");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtDistrictEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtFeeTypeEntity", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtFeeStructureEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtComplexEntity", "CourtComplex")
                        .WithMany()
                        .HasForeignKey("CourtComplexId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtDistrictEntity", "CourtDistrict")
                        .WithMany()
                        .HasForeignKey("CourtDistrictId");

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtComplex");

                    b.Navigation("CourtDistrict");

                    b.Navigation("CourtType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.LDBookEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.BookTypeEntity", "BookType")
                        .WithMany("lDBookEntities")
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.PublisherEntity", "Publisher")
                        .WithMany("lDBookEntities")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtType");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.ProceedingSubHeadEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.ProceedingHeadEntity", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.TypeOfCasesEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.CourtTypeEntity", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.NatureEntity", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtType");

                    b.Navigation("Nature");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.WorkMasterSubEntity", b =>
                {
                    b.HasOne("CourtApp.Domain.Entities.LawyerDiary.WorkMasterEntity", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.DistrictEntity", b =>
                {
                    b.HasOne("CourtApp.Entities.Common.StateEntity", "State")
                        .WithMany("Districts")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.ActEntity", b =>
                {
                    b.Navigation("ActBooks");

                    b.Navigation("AmendedActs");

                    b.Navigation("RepealedActs");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Advocate.GazetteTypeEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.CaseDetails.CaseDetailEntity", b =>
                {
                    b.Navigation("CaseAgainstEntities");

                    b.Navigation("CaseProcEntities");

                    b.Navigation("LinkedCases");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.CityEntity", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.Common.SubjectEntity", b =>
                {
                    b.Navigation("Acts");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.BookTypeEntity", b =>
                {
                    b.Navigation("lDBookEntities");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.CourtMasterEntity", b =>
                {
                    b.Navigation("CourtBenches");
                });

            modelBuilder.Entity("CourtApp.Domain.Entities.LawyerDiary.PublisherEntity", b =>
                {
                    b.Navigation("lDBookEntities");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.DistrictEntity", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CourtApp.Entities.Common.StateEntity", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
